class(spp)
dim(spp)
install.packages("vegan")
library(vegan)
specnumber(spp)
length(spp[,1])
length(spp[,2])
View(dat)
levels(dat$Place)
levels(dat$Forests)
names(dat)
?table
head(spp)
View(spp)
View(spp)
unique(dat$Place)
unique(dat$Forest)
specnumber(spp)
spp<-read.csv2(file.choose())
str(spp)
names(spp)
View(spp)
View(spp)
spp<-read.csv(file.choose())
names(spp)
View(spp)
table(spp$Ecosys)
table(spp$Sitio)
anava<-aov(Spp~Sitio, data=spp)
anava
summary(anava)
a<-TukeyHSD(anava,conf.level = 0.95)
boxplot(a)
a
plot(a)
boxplot(anava)
boxplot(a~Sitio)
a
boxplot(a~a$Sitio)
boxplot(spp~Sitio)
boxplot(spp~spp$Sitio)
boxplot(spp$Spp~spp$Sitio)
spp<-read.csv(file.choose())#######selecionas el archivo que me enviaste
library(raster)
r <- raster(system.file("external/test.grd", package="raster"))
persp(r)
library(mapvie)
library(mapview)
mapview(r)
persp(r, theta=180)
persp(r, theta=90)
persp(r, theta=30)
persp(r, theta=0)
persp(r, theta=0, phi=15)
persp(r, theta=0, phi=30)
persp(r, theta=0, phi=60)
persp(r, theta=30, phi=15)
persp(r, theta=0, phi=15)
persp(r, theta=30, phi=15) # max theta=30
persp(r, theta=60, phi=15) # max theta=30
persp(r, theta=0, phi=15) # max theta=30
persp(r, theta=15, phi=15) # max theta=30
persp(r, theta=30, phi=15) # max theta=30
persp(r, theta=45, phi=15) # max theta=30
persp(r, theta=60, phi=15) # max theta=30
persp(r, theta=0, phi=0)
persp(r, theta=0, phi=15)
persp(r, theta=0, phi=130)
persp(r, theta=0, phi=30)
persp(r, theta=0, phi=45)
persp(r, theta=0, phi=60)
persp(r, theta=0, phi=0)
persp(r, theta=15, phi=0)
persp(r, theta=30, phi=0)
persp(r, theta=45, phi=0)
persp(r, theta=60, phi=0)
?plot3D
levelpersp <- function(x, y, z, colors=topo.colors, ...) {
## getting the value of the midpoint
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
## calculating the breaks
breaks <- hist(zz, plot=FALSE)$breaks
## cutting up zz
cols <- colors(length(breaks)-1)
zzz <- cut(zz, breaks=breaks, labels=cols)
## plotting
persp(x, y, z, col=as.character(zzz), ...)
## return breaks and colors for the legend
list(breaks=breaks, colors=cols)
}
x <- seq(-10, 10, length=60)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
?extract
data_matrix <- rasterToPoints(r)
data_matrix <- rasterToPoints(r)
head(data_matrix)
xyz <- rasterToPoints(r)
x <- xyz$x
y <- xyz$y
z <- xyz$y
xyz <- rasterToPoints(r)
rm(data_matrix)
x <- xyz$x
xyz$x
xyz
xyz= data.frame(xyz)
x <- xyz$x
y <- xyz$y
z <- xyz$y
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
length(x)
length(y)
length(z)
levelpersp(x, y, z)
levelpersp <- function(x, y, z, colors=topo.colors, ...) {
## getting the value of the midpoint
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
## calculating the breaks
breaks <- hist(zz, plot=FALSE)$breaks
## cutting up zz
cols <- colors(length(breaks)-1)
zzz <- cut(zz, breaks=breaks, labels=cols)
## plotting
persp(x, y, z, col=as.character(zzz), ...)
## return breaks and colors for the legend
list(breaks=breaks, colors=cols)
}
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
levelpersp <- function(x, y, z, colors=topo.colors, ...) {
## getting the value of the midpoint
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
## calculating the breaks
breaks <- hist(zz, plot=FALSE)$breaks
## cutting up zz
cols <- colors(length(breaks)-1)
zzz <- cut(zz, breaks=breaks, labels=cols)
## plotting
persp(x, y, z, col=as.character(zzz), ...)
## return breaks and colors for the legend
list(breaks=breaks, colors=cols)
}
x <- seq(-10, 10, length=60)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
x
head(zyz$x)
x <- seq(-10, 10, length=60)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
levelpersp <- function(x, y, z, colors=topo.colors, ...) {
## getting the value of the midpoint
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
## calculating the breaks
breaks <- hist(zz, plot=FALSE)$breaks
## cutting up zz
cols <- colors(length(breaks)-1)
zzz <- cut(zz, breaks=breaks, labels=cols)
## plotting
persp(x, y, z, col=as.character(zzz), ...)
## return breaks and colors for the legend
list(breaks=breaks, colors=cols)
}
x <- seq(-10, 10, length=60)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
levelpersp <- function(x, y, z, colors=topo.colors, ...) {
## getting the value of the midpoint
zz <- (z[-1,-1] + z[-1,-ncol(z)] + z[-nrow(z),-1] + z[-nrow(z),-ncol(z)])/4
## calculating the breaks
breaks <- hist(zz, plot=FALSE)$breaks
## cutting up zz
cols <- colors(length(breaks)-1)
zzz <- cut(zz, breaks=breaks, labels=cols)
## plotting
persp(x, y, z, col=as.character(zzz), ...)
## return breaks and colors for the legend
list(breaks=breaks, colors=cols)
}
x <- seq(-10, 10, length=60)
y <- x
f <- function(x,y) { r <- sqrt(x^2+y^2); 10 * sin(r)/r }
z <- outer(x, y, f)
levelpersp(x, y, z, theta = 30, phi = 30, expand = 0.5)
x
head(xyz$x)
library(raster)
library(fields)
library(rasterVis)
install.packages("fields")
install.packages("rasterVis")
library(fields)
library(rasterVis)
install.packages("fields")
library(fields)
install.packages("rasterVis")
library(rasterVis)
?install.packages()
xy=data.frame(r[,1:2])
head(xy)
plot(r)
r[,1:2]
?interpolate
plot3D(r, zfac=2)
install.packages("rgl")
library(rgl)
plot3D(r, zfac=2)
library(fields)
library(rasterVis)
library(rgl)
library(raster)
r <- raster(system.file("external/test.grd", package="raster"))
plot(r)
persp(r, theta=60, phi=0)
plot3D(r, zfac=2)
?plot3D
plot3D(r, zfac=1)
plot3D(r, zfac=3)
library(raster)
r <- raster(system.file("external/test.grd", package="raster"))
persp(r)
persp(r, theta=60, phi=0)
plot3D(r, zfac=3)
?download.file
install.packages("keras")
library(keras)
?getValues
library(raster)
getValues()
values
library(forestChange)
install.packages("~/Downloads/forestChange_0.3.tar.gz", repos = NULL, type = "source")
library(forestChange)
install.packages("~/Downloads/forestChange.zip", repos = NULL, type = "win.binary")
library(gbm)
?gbm.step
library(dismo)
library(caret)
?gbm.step
?t
?t.test
?shapiro.test
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
# Calculates metrics from a DB
library(raster)
library(rgdal)
library(sp)
#install.packages("lubridate")
library(lubridate)
setwd("/Users/Victor/Documents/PROJECTS/Zika/Manuscripts/BiasPaper/Processing")
# Open dataset
indata=read.csv("Samples 2001 through 2015 Combined.csv")
names(indata)
refraster=raster("raster_mask_final.tif")
#indatasp=readOGR(dsn=".", layer="aedes")
# Add new columns with stastistics
indata$presence=rep(0, nrow(indata))
indata$presence[which(indata$ADULTS>0)]=1
indata$julian=format(as.Date(indata$COLLECTED, format="%m/%d/%Y"))
indata$julian=yday(indata$julian)
indata$trapclass=as.numeric(indata$TRAP)
indata$collectorclass=as.numeric(indata$COLLECTOR)
indata$taxonomistclass=as.numeric(indata$TAXONOMIST)
# Calculate trap frequency
table(indata$TRAP)
table(indata$trapclass)
# Extract statistics per year per sampled location in a raster
for (yr in 2001:2015){
indatayr=indata[which(indata$YEAR==yr, arr.ind=TRUE),]
indatasp<-SpatialPointsDataFrame(coords=indatayr[, c("LONGITUDE", 'LATITUDE')], data=indatayr,
proj4string=CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
indatasp<-spTransform(indatasp, crs(refraster))
abundance=rasterize(x=indatasp, y=refraster, field=indatasp@data[,14], fun="sum")
presence=rasterize(x=indatasp, y=refraster, field=indatasp@data[,15], fun="max")
sampint=rasterize(x=indatasp, y=refraster, field=indatasp@data[,15], fun="count")
freq=rasterize(x=indatasp, y=refraster, field=indatasp@data[,15], fun="sum") # number of sites with presences
mediandate=rasterize(x=indatasp, y=refraster, field=indatasp@data[,16],  fun=median)
maintrap=rasterize(x=indatasp, y=refraster, field=indatasp@data[,17],  fun=Mode)
maincollector=rasterize(x=indatasp, y=refraster, field=indatasp@data[,18],  fun=Mode)
maintaxonomist=rasterize(x=indatasp, y=refraster, field=indatasp@data[,19],  fun=Mode)
names(indatasp@data)
alboStack=stack(abundance,  presence, sampint, freq, mediandate, maintrap, maincollector,
maintaxonomist)
names(alboStack)=c("abundance", "presence", "sampint", "freq", "mediandate", "maintrap", "maincollector",
"maintaxonomist")
?gbm.step
sampint
Mode <- function(x, na.rm = FALSE) {
if(na.rm){
x = x[!is.na(x)]
}
ux <- unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
# Calculates metrics from a DB
library(raster)
library(rgdal)
library(sp)
#install.packages("lubridate")
library(lubridate)
setwd("/Users/Victor/Documents/PROJECTS/Zika/Manuscripts/BiasPaper/Processing")
# Open dataset
indata=read.csv("Samples 2001 through 2015 Combined.csv")
names(indata)
refraster=raster("raster_mask_final.tif")
#indatasp=readOGR(dsn=".", layer="aedes")
# Add new columns with stastistics
indata$presence=rep(0, nrow(indata))
indata$presence[which(indata$ADULTS>0)]=1
indata$julian=format(as.Date(indata$COLLECTED, format="%m/%d/%Y"))
indata$julian=yday(indata$julian)
indata$trapclass=as.numeric(indata$TRAP)
indata$collectorclass=as.numeric(indata$COLLECTOR)
indata$taxonomistclass=as.numeric(indata$TAXONOMIST)
# Calculate trap frequency
table(indata$TRAP)
table(indata$trapclass)
(length(indata$TRAP[indata$trapclass==5])+length(indata$TRAP[indata$trapclass==8]))/nrow(indata)
yr=2015
albostack=raster(paste(paste("albostack", as.character(yr), sep="_"), "tiff", sep="."))
library(raster)
setwd("/Users/Victor/Documents/PROJECTS/Zika/Manuscripts/BiasPaper/Processing")
albostack=raster(paste(paste("albostack", as.character(yr), sep="_"), "tiff", sep="."))
(paste(paste("albostack", as.character(yr), sep="_"), "tiff", sep="."))
getwd()
dir()
albostack=raster(paste(paste("albostack", as.character(yr), sep="_"), "tif", sep="."))
plot(albostack[[4]])
albostack
plot(albostack[[4]]
)
albostack=stack(paste(paste("albostack", as.character(yr), sep="_"), "tif", sep="."))
plot(albostack[[4]])
install.packages("rmarkdown")
library(rmarkdown)
library(viridis)
install.packages(‘viridis’)
install.packages("viridis"’")
install.packages("viridis")
library(viridis)
library(viridis)
image(volcano, col = viridis(200))
image(volcano, col = viridis(200, option = "A"))
render("1-example.Rmd")
setwd("/Users/Victor/Gitrepo/IntroRSCode")
render("1-example.Rmd")
# Set working directory
setwd("/Users/Victor/Documents/Courses/IntroRemoteSensing/2018Fall/Class1/LabMaterials")
# Set working directory
setwd("/Users/Victor/Gitrepo/IntroRSCode")
Import a raster file (in this case a DEM file in esri grid format)
# Download DEM data from: http://www.soest.hawaii.edu/coasts/data/
downloadURL=("ftp://soest.hawaii.edu/coastal/webftp/Kauai/dem/Kauai_DEM.zip")
filename="Kauai_DEM.zip"
download.file(downloadURL, filename)
# Unzip file
unzip(filename)
# Open the file in the R environment
KauaiDEM=raster("kaui_dem")
plot(KauaiDEM)
install.packages("TeX")
library(TeX)
plot(KauaiDEM)
#Perspective plot
persp(KauaiDEM)
persp(r, theta=60, phi=0)
# e.g. iteratate combinations of theta=0-60 and phi=0-60
plot3D(KauaiDEM, zfac=1)
library(plot3D)
# e.g. iteratate combinations of theta=0-60 and phi=0-60
plot3D(KauaiDEM, zfac=1)
library(rasterVis)
library(raster)
library(rgdal)
library(plot3D)
# e.g. iteratate combinations of theta=0-60 and phi=0-60
plot3D(KauaiDEM, zfac=1)
downloadURL=("http://files.hawaii.gov/dbedt/op/gis/data/kaustreets.shp.zip")
filename="kaustreets.shp.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "kau_centerlines")
downloadURL=("https://opendata.arcgis.com/datasets/4b839c5788e644d8b50a4b156beb02a0_4.zip")
filename="4b839c5788e644d8b50a4b156beb02a0_4.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "kau_centerlines")
downloadURL=("https://opendata.arcgis.com/datasets/4b839c5788e644d8b50a4b156beb02a0_4.zip")
filename="Roads__Kauai_County.zip"
download.file(downloadURL, filename)
unzip(filename)
filename="Roads__Kauai_County.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "kau_centerlines")
filename
unzip(filename)
getwd()
?readOGR
streets=readOGR(".", "kau_centerlines")
streets=readOGR(".", "Roads__Kauai_County")
plot(DEM)
library(rasterVis)
library(raster)
library(rgdal)
library(plot3D)
setwd("/Users/Victor/Gitrepo/IntroRSCode")
cone <- function(x, y){
sqrt(x^2+y^2)
}
x <- y <- seq(-1, 1, length= 100)
z <- outer(x, y, cone)
datarast=raster(z)
plot(datarast)
#downloadURL=("ftp://soest.hawaii.edu/coastal/webftp/Kauai/dem/Kauai_DEM.zip")
#filename="Kauai_DEM.zip"
#download.file(downloadURL, filename)
#unzip(filename)
DEM=raster("kaui_dem")
plot(DEM)
persp(DEM)
persp(DEM, theta=60, phi=0)
# e.g. iteratate combinations of theta=0-60 and phi=0-60
plot3D(DEM, zfac=1)
plot3D(DEM, zfac=1)
downloadURL=("https://opendata.arcgis.com/datasets/4b839c5788e644d8b50a4b156beb02a0_4.zip")
filename="Roads__Kauai_County.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "Roads__Kauai_County")
plot(DEM)
plot(streets, col='gray', add=T)
plot(DEM)
plot(streets, col='black', add=T)
streets
DEM
proj4string(streets)=CRS(DEM)
proj4string(streets)=crs(DEM)
streets=readOGR(".", "Roads__Kauai_County")
streetsPrj=spTransform(streets, crs(DEM))
plot(DEM)
plot(streets, col='black', add=T)
plot(streets)
streets
plot(DEM)
plot(streetsPrj, col='black', add=T)
plot(DEM)
plot(streetsPrj, col='black', add=T)
streets
crs(streets)
crs(DEM)
plot(DEM)
plot(streetsPrj, col='gray', add=T)
downloadURL=("ftp://soest.hawaii.edu/coastal/webftp/Oahu/dem/Oahu_DEM.zip")
filename="Oahu_DEM.zip"
download.file(downloadURL, filename)
unzip(filename)
DEM=raster("oahu_dem")
plot(DEM)
persp(DEM)
persp(DEM, theta=60, phi=0)
plot3D(DEM, zfac=1)
plot3D(DEM, zfac=1)
downloadURL=("https://opendata.arcgis.com/datasets/ced64b9aeaf34a2e817df0295b57c9c2_7.zip")
filename="Major_Roads__Oahu_Honolulu_County.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "Roads__Kauai_County")
crs(DEM)
crs(streets)
streetsPrj=spTransform(streets, crs(DEM))
plot(DEM)
plot(streetsPrj, col='black', add=T)
crs(DEM)
crs(streets)
streetsPrj=spTransform(streets, crs(DEM))
crs(streetsPrj)
plot(DEM)
plot(streetsPrj, col='black', add=T)
downloadURL=("https://opendata.arcgis.com/datasets/ced64b9aeaf34a2e817df0295b57c9c2_7.zip")
filename="Major_Roads__Oahu_Honolulu_County.zip"
download.file(downloadURL, filename)
unzip(filename)
streets=readOGR(".", "Major_Roads__Oahu_Honolulu_County")
crs(DEM)
crs(streets)
streetsPrj=spTransform(streets, crs(DEM))
crs(streetsPrj)
plot(DEM)
plot(streetsPrj, col='black', add=T)
pdf("plots.pdf")
plot(DEM)
plot(streetsPrj, col='gray', add=T)
dev.off()
?extract
library(terra)
?extract
