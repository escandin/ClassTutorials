wd="/Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8/Lab8Materials"
#dir.create(wd)
setwd(wd)
dir()
L8name="LC08_L1TP_006066_20160804_20170322_01_T1"
# Decompress and stack landsat image
untar(paste(L8name, "tar", sep="."))
meta=readMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
# Load screenshots
wd="/Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8/Lab8Materials"
setwd(wd)
library(knitr)    # For knitting document and include_graphics function
library(kableExtra)
knitr::opts_knit$set(root.dir = wd)
#knitr::knit(input=wd, output=wd)
library(raster)
library(rgdal)
library(RStoolbox)
dir()
L8name="LC08_L1TP_006066_20160804_20170322_01_T1"
# Decompress and stack landsat image
untar(paste(L8name, "tar", sep="."))
meta=readMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8=stackMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8
plotRGB(L8, r=5, g=4, b=3, stretch="lin")
#e=drawExtent()
e=extent(513128.8, 599389.9 , -1001877, -894184.4)
L8rsz=crop(L8, e)
plotRGB(L8rsz, r=5, g=4, b=3, stretch="lin")
# Remove objects to release memory
rm(L8)
haze=estimateHaze(L8rsz, hazeBands=1:5,
darkProp=0.001, plot=TRUE)
L8dos=radCor(L8rsz, metaData=meta,
method="sdos", hazeValues=haze, hazeBands=1:5)
L8subset=L8dos[[2:7]]
rm(L8dos)
rm(L8rsz)
L8indices=spectralIndices(L8subset, blue=1, green=2,
red=3, nir=4, swir2=5, swir3=6,
indices=c("NDVI",  "NDWI", "NBRI")) # Spectral indices
plotRGB(L8indices, r=1, g=2, b=3, stretch="lin")
L8tascap=tasseledCap(L8subset, sat="Landsat8OLI") # Tasseled cap
plotRGB(L8tascap, r=1, g=2, b=3, stretch="lin")
L8allbands=stack(L8subset, L8indices)
rm(L8subset, L8indices)
dir()
L8name="LC08_L1TP_006066_20160804_20170322_01_T1"
# Decompress and stack landsat image
untar(paste(L8name, "tar", sep="."))
meta=readMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8=stackMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8
plotRGB(L8, r=5, g=4, b=3, stretch="lin")
#e=drawExtent()
e=extent(513128.8, 599389.9 , -1001877, -894184.4)
L8rsz=crop(L8, e)
plotRGB(L8rsz, r=5, g=4, b=3, stretch="lin")
# Remove objects to release memory
rm(L8)
haze=estimateHaze(L8rsz, hazeBands=1:5,
darkProp=0.001, plot=TRUE)
L8dos=radCor(L8rsz, metaData=meta,
method="sdos", hazeValues=haze, hazeBands=1:5)
L8subset=L8dos[[2:7]]
rm(L8dos)
rm(L8rsz)
?spectralIndices
L8indices=spectralIndices(L8subset, blue=1, green=2,
red=3, nir=4, swir2=5, swir3=6,
indices=c("NDVI",  "NDWI", "NBRI")) # Spectral indices
plotRGB(L8indices, r=1, g=2, b=3, stretch="lin")
L8tascap=tasseledCap(L8subset, sat="Landsat8OLI") # Tasseled cap
plotRGB(L8tascap, r=1, g=2, b=3, stretch="lin")
L8allbands=stack(L8subset, L8indices, L8)
L8indices=spectralIndices(L8subset, blue=1, green=2,
red=3, nir=4, swir2=5, swir3=6,
indices=c("NDVI",  "NDWI", "NBRI")) # Spectral indices
plotRGB(L8indices, r=1, g=2, b=3, stretch="lin")
L8tascap=tasseledCap(L8subset, sat="Landsat8OLI") # Tasseled cap
plotRGB(L8tascap, r=1, g=2, b=3, stretch="lin")
L8allbands=stack(L8subset, L8indices, L8tascap)
rm(L8subset, L8indices, L8tascap)
# Load screenshots
wd="/Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8/Lab8Materials"
setwd(wd)
library(knitr)    # For knitting document and include_graphics function
library(kableExtra)
knitr::opts_knit$set(root.dir = wd)
#knitr::knit(input=wd, output=wd)
library(raster)
library(rgdal)
library(RStoolbox)
dir()
L8name="LC08_L1TP_006066_20160804_20170322_01_T1"
# Decompress and stack landsat image
untar(paste(L8name, "tar", sep="."))
meta=readMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8=stackMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8
plotRGB(L8, r=5, g=4, b=3, stretch="lin")
#e=drawExtent()
e=extent(513128.8, 599389.9 , -1001877, -894184.4)
L8rsz=crop(L8, e)
plotRGB(L8rsz, r=5, g=4, b=3, stretch="lin")
# Remove objects to release memory
rm(L8)
haze=estimateHaze(L8rsz, hazeBands=1:5,
darkProp=0.001, plot=TRUE)
L8dos=radCor(L8rsz, metaData=meta,
method="sdos", hazeValues=haze, hazeBands=1:5)
L8subset=L8dos[[2:7]]
rm(L8dos)
rm(L8rsz)
#L8indices=spectralIndices(L8subset, blue=1, green=2,
#                          red=3, nir=4, swir2=5, swir3=6,
#                          indices=c("NDVI",  "NDWI", "NBRI")) # Spectral indices
#plotRGB(L8indices, r=1, g=2, b=3, stretch="lin")
L8tascap=tasseledCap(L8subset, sat="Landsat8OLI") # Tasseled cap
plotRGB(L8tascap, r=1, g=2, b=3, stretch="lin")
#L8allbands=stack(L8subset, L8indices, L8tascap)
#rm(L8indices, L8tascap)
unsuper=unsuperClass(L8tascap, nClasses=15)
plot(unsupervised$map, col=sample(colors(), 15))
calibdata=readOGR(".", "calibdata")
calibdata=readOGR(".", "calibdata")
calibdata
stack2df=function(rastack=inrast, spdf=polygons,
classnames=c("forest", "lake","river", "sand", "pasture"))
{
# na.rm=TRUE, stackmask=msk){
# extracts into a data frame the pixel values for all bands from different classes
# defined in a spatialpolygon dataframe
# na.rm removes all pixels that have NAs in at least one rastack band
# required functions
stackmask= function(rastack=rastack, ranges=c(-Inf,1,NA, 1,99999,1)){
# masks out any pixels that have no valid information in at least 1 band in a raster stack
# mask input image
ranges=matrix(ranges)
msk=reclassify(rastack,ranges)
msk=max(msk)
rastack=rastack*msk
return(rastack)
}
extractval=function(inraster=rastack, msk=msk){
outvector=inraster*msk
outvector=na.omit(getValues(outvector))
return(outvector)
}
# assign class ID to each class
spdf$class_ID=rep(NA, nrow(spdf@data))
for (i in 1:length(classnames)){
spdf$class_ID[which(spdf$class==classnames[i])]=i
}
# create a raster of class_ids
calibrast=rasterize(spdf, rastack[[1]], field=spdf$class_ID)
ranges=matrix(c(-Inf,.99,NA, 1,99999,1))
calibmsk=reclassify(calibrast,ranges)
# if (na.rm==TRUE) {
#   rastack=stackmask(rastack)
#   calibmsk=calibmsk*rastack
# }
# Extract pixel values into a dataframe
class_ID=(extractval(calibrast, calibmsk))
dataset=data.frame(matrix(data=NA, nrow=length(class_ID), ncol=nlayers(rastack)))
# add a column with a class name
dbclassname=rep(NA, length(class_ID))
for (i in 1:length(classnames)){
dbclassname[which(class_ID==i, arr.ind=TRUE)] = unique(spdf$class)[which(unique(spdf$class_ID)==i)]
}
dataset=cbind(class_ID, dbclassname, dataset)
rm(class_ID, dbclassname)
for (i in 1:nlayers(rastack)){
dataset[,i+2]=extractval(rastack[[i]], calibmsk)
}
names(dataset)=c("class_ID", "class_name", names(rastack))
return(dataset)
}
plotSpectra=function(dataset=outdata, bandnames=c("B3_dn", "B4_dn", "B5_dn"),
classfield=1, classlabels= levels(dataset[,classfield]),
classcol=sample(colors(), size=length(classlabels))){
#Assign colors to different labels
cols=rep(NA, length(classlabels))
for (i in 1:length(classlabels)){
cols[which(dataset[,classfield]==classlabels[i])]=classcol[i]
}
return(plot3d(outdata[,as.character(bandnames[1])],
outdata[, as.character(bandnames[2])],
outdata[, as.character(bandnames[3])],
xlab=bandnames[1],
ylab=bandnames[2],
zlab=bandnames[3],
col=cols))
legend3d("topleft", legend = classlabels,
pch = 16, col = classcol  , cex=1, inset=c(0.02))
}
outdata=stack2df(rastack=inimage, spdf=calibdata,
classnames=c("urbano", "lago", "bosque", "pasto", "arena", "rio",  "secondary"))
outdata=stack2df(rastack=L8tascap, spdf=calibdata,
classnames=c("urbano", "lago", "bosque", "pasto", "arena", "rio",  "secondary"))
plotSpectra(dataset=outdata, bandnames=c("B3_dn", "B4_dn", "B5_dn"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("green", "blue", "orange", "gray", "pink", "red", "purple"))
library(raster)
library(rgdal)
library(RStoolbox)
library(rgl)
outdata=stack2df(rastack=L8tascap, spdf=calibdata,
classnames=c("urbano", "lago", "bosque", "pasto", "arena", "rio",  "secondary"))
plotSpectra(dataset=outdata, bandnames=c("B3_dn", "B4_dn", "B5_dn"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("green", "blue", "orange", "gray", "pink", "red", "purple"))
legend3d("topleft", legend= as.factor(unique(calibdata$class)),
col=c("green", "blue", "orange", "gray", "pink", "red", "purple"),
pch=16, cex=1, inset=c(0.02))
outdata
plotSpectra(dataset=outdata, bandnames=c("brightness", "greenness", "wetness"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("green", "blue", "orange", "gray", "pink", "red", "purple"))
legend3d("topleft", legend= as.factor(unique(calibdata$class)),
col=c("green", "blue", "orange", "gray", "pink", "red", "purple"),
pch=16, cex=1, inset=c(0.02))
supervised=superClass(L8tascap, calibdata, trainPartition=.8,
responseCol = "class" )
extent(calibdata)
dir()
L8name="LC08_L1TP_006066_20160804_20170322_01_T1"
# Decompress and stack landsat image
untar(paste(L8name, "tar", sep="."))
meta=readMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8=stackMeta(paste(paste(L8name, "MTL", sep="_"), "txt", sep="."))
L8
plotRGB(L8, r=5, g=4, b=3, stretch="lin")
#e=drawExtent()
e=extent(511000, 584000 , -992000, -918000)
L8rsz=crop(L8, e)
plotRGB(L8rsz, r=5, g=4, b=3, stretch="lin")
# Remove objects to release memory
rm(L8)
haze=estimateHaze(L8rsz, hazeBands=1:5,
darkProp=0.001, plot=TRUE)
L8dos=radCor(L8rsz, metaData=meta,
method="sdos", hazeValues=haze, hazeBands=1:5)
L8subset=L8dos[[2:7]]
rm(L8dos)
rm(L8rsz)
#L8indices=spectralIndices(L8subset, blue=1, green=2,
#                          red=3, nir=4, swir2=5, swir3=6,
#                          indices=c("NDVI",  "NDWI", "NBRI")) # Spectral indices
#plotRGB(L8indices, r=1, g=2, b=3, stretch="lin")
L8tascap=tasseledCap(L8subset, sat="Landsat8OLI") # Tasseled cap
plotRGB(L8tascap, r=1, g=2, b=3, stretch="lin")
#L8allbands=stack(L8subset, L8indices, L8tascap)
#rm(L8indices, L8tascap)
calibdata
names(calibdata)
calibdata$class
unique(calibdata$class)
supervised=superClass(L8tascap, calibdata, trainPartition=.8,
responseCol = "class" )
calibdata
L8tascap
supervised=superClass(L8tascap, calibdata, trainPartition=.8,
responseCol = "class" )
calibdata=readOGR(".", "calibdata")
supervised=superClass(L8tascap, calibdata, trainPartition=.8,
responseCol = "class" )
plot(supervised$map, col=sample(colors(), length(unique(calibdata$class))))
unique(calibdata$names)
calibdata
unique(calibdata$class)
plot(supervised$map, col=c("red", "blue", "green", "yellow", "gray", "cyan", "purple"))
(calibdata$class)
(calibdata$ID)
plot(supervised$map, col=c("gray", "green", "blue", "yellow", "cyan", "purple", "red", "purple"))
plot(supervised$map, col=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"))
unsupervised=unsuper
rm(unsuper)
jm.dist <- function ( Vector.1 , Vector.2 ) {
# this function adapted from:
# https://stats.stackexchange.com/questions/78849/measure-for-separability
Matrix.1 <- as.matrix (Vector.1)
Matrix.2 <- as.matrix (Vector.2)
mean.Matrix.1 <- mean ( Matrix.1 )
mean.Matrix.2 <- mean ( Matrix.2 )
mean.difference <- mean.Matrix.1 - mean.Matrix.2
cv.Matrix.1 <- cov ( Matrix.1 )
cv.Matrix.2 <- cov ( Matrix.2 )
p <- ( cv.Matrix.1 + cv.Matrix.2 ) / 2
# calculate the Bhattacharryya index
bh.distance <- 0.125 *t ( mean.difference ) * p^ ( -1 ) * mean.difference +
0.5 * log (det ( p ) / sqrt (det ( cv.Matrix.1 ) * det ( cv.Matrix.2 )))
# calculate Jeffries-Matusita
# following formula is bound between 0 and 2.0
jm.distance <- 2 * ( 1 - exp ( -bh.distance ) )
# also found in the bibliography:
# jm.distance <- 1000 * sqrt (   2 * ( 1 - exp ( -bh.distance ) )   )
# the latter formula is bound between 0 and 1414.0
return(jm.distance)
}
head(outdata)
tail(outdata)
View(outdata)
View(outdata)
install.packages(spatialEco)
install.packages("spatialEco")
unique(outdata$class_name)
outdata
calibdata
unique(outdata$class_name)
calibdata
unique(calibdata$ID)
unique(calibdata$class)
plotSpectra(dataset=outdata, bandnames=c("brightness", "greenness", "wetness"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("green", "blue", "orange", "gray", "pink", "red", "purple"))
legend3d("topleft", legend= as.factor(unique(calibdata$class)),
col=c("green", "blue", "orange", "gray", "pink", "red", "purple"),
pch=16, cex=1, inset=c(0.02))
outdata
calibdata
calibdata(class)
calibdata$class
levels(calibdata$class)
outdata=stack2df(rastack=L8tascap, spdf=calibdata,
classnames=levels(calibdata$class))
plotSpectra(dataset=outdata, bandnames=c("brightness", "greenness", "wetness"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"))
plotSpectra(dataset=outdata, bandnames=c("brightness", "greenness", "wetness"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"))
legend3d("topleft", legend= as.factor(unique(calibdata$class)),
col=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"),
pch=16, cex=1, inset=c(0.02))
outdata=stack2df(rastack=L8tascap, spdf=calibdata,
classnames=levels(calibdata$class))#
plotSpectra(dataset=outdata, bandnames=c("brightness", "greenness", "wetness"), classfield=2,
classlabels=unique(outdata$class_name),
classcol=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"))
legend3d("topleft", legend= as.factor(unique(calibdata$class)),
col=c("gray", "green", "blue", "yellow", "cyan", "purple", "red"),
pch=16, cex=1, inset=c(0.02))
head(outdata)
stack2df=function(rastack=inrast, spdf=polygons,
classnames=c("forest", "lake","river", "sand", "pasture"))
{
# na.rm=TRUE, stackmask=msk){
# extracts into a data frame the pixel values for all bands from different classes
# defined in a spatialpolygon dataframe
# na.rm removes all pixels that have NAs in at least one rastack band
# required functions
stackmask= function(rastack=rastack, ranges=c(-Inf,1,NA, 1,99999,1)){
# masks out any pixels that have no valid information in at least 1 band in a raster stack
# mask input image
ranges=matrix(ranges)
msk=reclassify(rastack,ranges)
msk=max(msk)
rastack=rastack*msk
return(rastack)
}
extractval=function(inraster=rastack, msk=msk){
outvector=inraster*msk
outvector=na.omit(getValues(outvector))
return(outvector)
}
# assign class ID to each class
spdf$class_ID=rep(NA, nrow(spdf@data))
for (i in 1:length(classnames)){
spdf$class_ID[which(spdf$class==classnames[i])]=i
}
# create a raster of class_ids
calibrast=rasterize(spdf, rastack[[1]], field=spdf$class_ID)
ranges=matrix(c(-Inf,.99,NA, 1,99999,1))
calibmsk=reclassify(calibrast,ranges)
# if (na.rm==TRUE) {
#   rastack=stackmask(rastack)
#   calibmsk=calibmsk*rastack
# }
# Extract pixel values into a dataframe
class_ID=(extractval(calibrast, calibmsk))
dataset=data.frame(matrix(data=NA, nrow=length(class_ID), ncol=nlayers(rastack)))
# add a column with a class name
dbclassname=rep(NA, length(class_ID))
for (i in 1:length(classnames)){
dbclassname[which(class_ID==i, arr.ind=TRUE)] = unique(spdf$class)[which(unique(spdf$class_ID)==i)]
}
dataset=cbind(class_ID, dbclassname, dataset)
rm(class_ID, dbclassname)
for (i in 1:nlayers(rastack)){
dataset[,i+2]=extractval(rastack[[i]], calibmsk)
}
names(dataset)=c("class_ID", "class_name", names(rastack))
return(dataset)
}
plotSpectra=function(dataset=outdata, bandnames=c("B3_dn", "B4_dn", "B5_dn"),
classfield=1, classlabels= levels(dataset[,classfield]),
classcol=sample(colors(), size=length(classlabels))){
#Assign colors to different labels
cols=rep(NA, length(classlabels))
for (i in 1:length(classlabels)){
cols[which(dataset[,classfield]==classlabels[i])]=classcol[i]
}
return(plot3d(outdata[,as.character(bandnames[1])],
outdata[, as.character(bandnames[2])],
outdata[, as.character(bandnames[3])],
xlab=bandnames[1],
ylab=bandnames[2],
zlab=bandnames[3],
col=cols))
legend3d("topleft", legend = classlabels,
pch = 16, col = classcol  , cex=1, inset=c(0.02))
}
setwd("Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8")
setwd("Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8")
# Load screenshots
wd="/Users/Victor/Documents/Courses/IntroRemoteSensing/2019Spring/Class8/Lab8Materials"
setwd(wd)
